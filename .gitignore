#This block is for importing all the necessary libraries

import pandas as pd
import matplotlib.pyplot as plt
from tabulate import tabulate

music_library = pd.DataFrame(columns=['Title', 'Artist', 'Album', 'Genre', 'Year'])
song_list_file = 'music_library.csv'

def input_music_library_data():
    global music_library

    while True:
        csv_file = input("Enter the path of a CSV file or type 'done' to finish: ")

        if csv_file.lower() == 'done':
            break

        try:
            # Read data from the CSV file
            new_data = pd.read_csv(csv_file)

            # Append the new data to the existing music_library DataFrame
            music_library = pd.concat([music_library, new_data], ignore_index=True)

            print("Data added to music_library.")
            
            # Print the current state of the DataFrame
            print("Current Music Library Data:")
            print(music_library)
            break
        except Exception as e:
            print(f"Error: {e}. Please enter a valid CSV file path.")

    return music_library

# Function to generate statistics and display a custom-colored pie chart
def generate_statistics():
    if not music_library.empty:
        # Genre statistics
        genre_counts = music_library['Genre'].value_counts()

        # Define custom colors
        colors = ['gold', 'lightcoral', 'lightskyblue', 'lightgreen']

        # Generate a pie chart for genre distribution with custom colors
        plt.figure(figsize=(3, 3))
        plt.pie(genre_counts, labels=genre_counts.index, autopct='%1.1f%%', colors=colors)
        plt.title('Genre Distribution')
        plt.show()

    else:
        print("No data for statistics.")

def add_song_to_library():
    global music_library 
    title = input("Enter the song title: ")
    artist = input("Enter the artist name: ")
    album = input("Enter the album name: ")
    genre = input("Enter the genre: ")
    year = input("Enter the year: ")

    # Create a new song DataFrame
    new_song = pd.DataFrame({'Title': [title], 'Artist': [artist], 'Album': [album], 'Genre': [genre], 'Year': [year]})

    # Append the new song to the music_library
    music_library = music_library.append(new_song, ignore_index=True)

    # Reset the index to ensure uniqueness
    music_library.reset_index(drop=True, inplace=True)

    # Save the updated list to the CSV file
    music_library.to_csv(song_list_file, index=False)
    print(f"Song '{title}' by {artist} added to the library.")

def remove_song_by_title():
    global music_library  # Declare music_library as a global variable

    title_to_remove = input("Enter the title of the song you want to remove: ")

    # Convert the user input to lowercase (or uppercase) for case-insensitive comparison
    title_to_remove = title_to_remove.lower()  # Convert to lowercase

    # Convert the titles in the DataFrame to lowercase for comparison
    music_library['Title'] = music_library['Title'].str.lower()

    # Check if the song title exists in the library (case-insensitive)
    matching_titles = music_library[music_library['Title'] == title_to_remove]

    if not matching_titles.empty:
        # Remove the song(s) by filtering out the specified title(s)
        music_library = music_library[~music_library['Title'].isin([title_to_remove])]

        # Convert the titles in the DataFrame back to the original letter casing
        music_library['Title'] = music_library['Title'].str.title()

        # Save the updated list to the CSV file
        music_library.to_csv(song_list_file, index=False)
        print(f"Song '{matching_titles['Title'].values[0]}' removed from the library.")
    else:
        print(f"Song '{title_to_remove}' not found in the library.")

def clear_library():
    global music_library  # Declare music_library as a global variable

    if not music_library.empty:
        # Clear the DataFrame by creating an empty one
        music_library = pd.DataFrame(columns=['Title', 'Artist', 'Album', 'Genre', 'Year'])

        # Save the empty library to the CSV file
        music_library.to_csv(song_list_file, index=False)
        print("All entries in the music library have been cleared.")
    else:
        print("The music library is already empty.")

# Function to display the music library as a table
def display_library():
    global music_library
    if not music_library.empty:
        # Remove rows with 'nan' in the 'Title' column
        music_library = music_library.dropna(subset=['Title'])
        
        # Rename the 'Ttile' column to 'Title'
        music_library = music_library.rename(columns={'Ttile': 'Title'})
        
        # Display the library as a nicely formatted table
        table = tabulate(music_library, headers='keys', tablefmt='grid')
        print(table)
    else:
        print("The music library is empty.")

name=input("Enter your name: ")
print(f"Hello {name}! Welcome to the HarmonyHub: Your Gateway to Music Bliss. We are excited to have you here.")
input_music_library_data() 
print("\nGiven below is a list of functions you can perform in your HarmonyHub.Enter the prompt as provided to perform the required function.\n")
print("To add a song to the library: add_song_to_library()\n")
print("To remove a song from the library: remove_song_by_title()\n")
print("To clear all the entries in the library: clear_library()\n")
print("To make a new library: create_new_library(library_name)\n")
print("To show the current entries in the library: display_library()\n")
print("To view statistics of types of genres in the library: generate_statistics()\n")

